import streamlit as st
import torch
import torchvision
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
from torchvision.models.detection.mask_rcnn import MaskRCNNPredictor
from torchvision import transforms as T
from torchvision import models
import torch.nn as nn
from PIL import Image
import numpy as np
import cv2

# --- Configuration ---
# ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng trong m√¥i tr∆∞·ªùng ch·∫°y Streamlit
CLASSIFIER_MODEL_PATH = './weight/chess_classifier_resnet_finetuned.pth'
SEGMENTATION_MODEL_PATH = './weight/chess_segmentation_rcnn_finetuned.pth'

# --- Class Names ---
CLASS_NAMES_CLASSIFIER = ['bishop', 'king', 'knight', 'pawn', 'queen', 'rook']
# V·∫´n c·∫ßn ƒë·ªãnh nghƒ©a CLASS_NAMES_SEGMENTATION d√π kh√¥ng hi·ªÉn th·ªã label tr·ª±c ti·∫øp
# v√¨ model tr·∫£ v·ªÅ index d·ª±a tr√™n s·ªë l·ªõp n√†y
CLASS_NAMES_SEGMENTATION = ['background', 'piece']

# --- Device Setup ---
main_device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# Ch·∫°y segmentation tr√™n CPU ƒë·ªÉ tr√°nh l·ªói NMS tr√™n CUDA (n·∫øu c√≥)
segmentation_device = torch.device("cpu")

# --- Model Loading Functions with Caching ---

@st.cache_resource
def load_classifier_model(model_path):
    """T·∫£i m√¥ h√¨nh ResNet50 ƒë·ªÉ ph√¢n lo·∫°i."""
    try:
        model = models.resnet50(weights=None)
        num_ftrs = model.fc.in_features
        model.fc = nn.Linear(num_ftrs, len(CLASS_NAMES_CLASSIFIER))
        try:
            # ∆Øu ti√™n load map_location=main_device
            model.load_state_dict(torch.load(model_path, map_location=main_device, weights_only=True))
        except:
            st.warning(f"Kh√¥ng th·ªÉ load classifier weights v·ªõi weights_only=True ho·∫∑c tr√™n device {main_device}. Th·ª≠ l·∫°i v·ªõi CPU.")
            try:
                # N·∫øu l·ªói, th·ª≠ load l√™n CPU r·ªìi chuy·ªÉn device sau
                model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu'), weights_only=True))
            except:
                 st.warning(f"Kh√¥ng th·ªÉ load classifier weights v·ªõi weights_only=True ngay c·∫£ tr√™n CPU. Th·ª≠ kh√¥ng d√πng tham s·ªë n√†y.")
                 model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')))

        model = model.to(main_device) # ƒê·∫£m b·∫£o model ·ªü ƒë√∫ng device ch√≠nh
        model.eval()
        st.success(f"Classifier model loaded successfully on {main_device}!")
        return model
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file tr·ªçng s·ªë ph√¢n lo·∫°i t·∫°i: {model_path}")
        return None
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh ph√¢n lo·∫°i: {e}")
        return None

@st.cache_resource
def load_segmentation_model(model_path, num_classes):
    """T·∫£i m√¥ h√¨nh Mask R-CNN ƒë·ªÉ ph√¢n ƒëo·∫°n (CH·∫†Y TR√äN CPU)."""
    try:
        model = torchvision.models.detection.maskrcnn_resnet50_fpn(weights=None)
        in_features_box = model.roi_heads.box_predictor.cls_score.in_features
        model.roi_heads.box_predictor = FastRCNNPredictor(in_features_box, num_classes)
        in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
        hidden_layer = 256
        model.roi_heads.mask_predictor = MaskRCNNPredictor(in_features_mask, hidden_layer, num_classes)
        try:
             model.load_state_dict(torch.load(model_path, map_location=segmentation_device, weights_only=True))
        except:
             st.warning(f"Kh√¥ng th·ªÉ load segmentation weights v·ªõi weights_only=True. Th·ª≠ l·∫°i kh√¥ng c√≥ tham s·ªë n√†y.")
             model.load_state_dict(torch.load(model_path, map_location=segmentation_device))

        model.to(segmentation_device) # ƒê·∫£m b·∫£o model n·∫±m tr√™n CPU
        model.eval()
        st.success(f"Segmentation model loaded successfully on {segmentation_device}!")
        return model
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file tr·ªçng s·ªë ph√¢n ƒëo·∫°n t·∫°i: {model_path}")
        return None
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh ph√¢n ƒëo·∫°n: {e}")
        return None

# --- Preprocessing Functions ---

def preprocess_image_for_classification(image_pil):
    """Chu·∫©n b·ªã ·∫£nh cho m√¥ h√¨nh ph√¢n lo·∫°i ResNet50."""
    transform = T.Compose([
        T.Resize(256),
        T.CenterCrop(224),
        T.ToTensor(),
        T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    image_tensor = transform(image_pil).unsqueeze(0)
    return image_tensor.to(main_device)

def preprocess_image_for_segmentation(image_pil):
    """Chu·∫©n b·ªã ·∫£nh cho m√¥ h√¨nh ph√¢n ƒëo·∫°n Mask R-CNN (G·ª¨I L√äN CPU)."""
    transform = T.Compose([
        T.ToTensor()
    ])
    image_tensor = transform(image_pil)
    return [image_tensor.to(segmentation_device)]

# --- Inference Functions ---

def classify_image(model, processed_image):
    """Th·ª±c hi·ªán ph√¢n lo·∫°i ·∫£nh b·∫±ng model ResNet50."""
    with torch.no_grad():
        outputs = model(processed_image)
        probabilities = torch.softmax(outputs, dim=1)
        top_p, top_class_idx = probabilities.topk(1, dim=1)
    return top_class_idx.item(), top_p.item()

def segment_image(model, processed_image_list):
    """Th·ª±c hi·ªán ph√¢n ƒëo·∫°n ·∫£nh b·∫±ng model Mask R-CNN (CH·∫†Y TR√äN CPU)."""
    with torch.no_grad():
        outputs = model(processed_image_list)
    return outputs[0]

# --- Visualization Function (MODIFIED) ---

def create_binary_mask_image(image_pil, outputs, threshold):
    """
    T·∫°o ·∫£nh nh·ªã ph√¢n t·ª´ k·∫øt qu·∫£ segmentation.
    Qu√¢n c·ªù (tr√™n ng∆∞·ª°ng) m√†u tr·∫Øng (255), n·ªÅn m√†u ƒëen (0).
    """
    # L·∫•y k√≠ch th∆∞·ªõc ·∫£nh g·ªëc ƒë·ªÉ t·∫°o ·∫£nh mask c√πng k√≠ch th∆∞·ªõc
    try:
        # N·∫øu image_pil l√† PIL Image
        width, height = image_pil.size
    except AttributeError:
        # N·∫øu image_pil ƒë√£ l√† numpy array (√≠t kh·∫£ nƒÉng x·∫£y ra v·ªõi code hi·ªán t·∫°i)
         height, width, _ = image_pil.shape

    # T·∫°o ·∫£nh n·ªÅn ƒëen (grayscale)
    binary_mask_image = np.zeros((height, width), dtype=np.uint8)

    # L·∫•y scores v√† masks t·ª´ output (ƒë√£ ·ªü CPU)
    scores = outputs['scores'].numpy()
    masks = outputs['masks'].numpy() # Shape (N, 1, H, W)

    # Duy·ªát qua c√°c ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ph√°t hi·ªán
    for i in range(len(scores)):
        score = scores[i]
        # Ch·ªâ x·ª≠ l√Ω nh·ªØng mask c√≥ score cao h∆°n ng∆∞·ª°ng
        if score > threshold:
            # L·∫•y mask c·ªßa ƒë·ªëi t∆∞·ª£ng th·ª© i, b·ªè chi·ªÅu channel (1), shape (H, W)
            mask = masks[i, 0]
            # T·∫°o mask boolean (True/False) d·ª±a tr√™n ng∆∞·ª°ng mask (th∆∞·ªùng l√† 0.5)
            mask_bool = mask > 0.5
            # T·∫°i nh·ªØng v·ªã tr√≠ True trong mask_bool, g√°n gi√° tr·ªã tr·∫Øng (255) cho ·∫£nh nh·ªã ph√¢n
            # Ph√©p OR (|) logic ƒë·∫£m b·∫£o pixel tr·∫Øng n·∫øu c√≥ b·∫•t k·ª≥ mask n√†o ph·ªß l√™n
            binary_mask_image[mask_bool] = 255

    # Chuy·ªÉn numpy array (H, W) th√†nh ·∫£nh PIL Grayscale ('L')
    return Image.fromarray(binary_mask_image, mode='L')

# --- Streamlit App ---

st.set_page_config(layout="wide", page_title="Chess Piece Recognition")
st.title("‚ôüÔ∏è Chess Piece Classification and Segmentation")
st.write("Upload an image of a chessboard or chess pieces.")

# T·∫£i models
classifier_model = load_classifier_model(CLASSIFIER_MODEL_PATH)
segmentation_model = load_segmentation_model(SEGMENTATION_MODEL_PATH, num_classes=len(CLASS_NAMES_SEGMENTATION))

# --- Sidebar ---
st.sidebar.header("Options")
uploaded_file = st.sidebar.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
segmentation_threshold = st.sidebar.slider("Segmentation Confidence Threshold", 0.0, 1.0, 0.5, 0.05)

if uploaded_file is not None:
    image_pil = Image.open(uploaded_file).convert("RGB")

    st.image(image_pil, caption="Uploaded Image", use_column_width=True)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìä Classification Result (ResNet50)")
        if classifier_model:
            try:
                processed_cls_img = preprocess_image_for_classification(image_pil)
                pred_idx, confidence = classify_image(classifier_model, processed_cls_img)
                pred_label = CLASS_NAMES_CLASSIFIER[pred_idx]
                st.metric(label="Predicted Piece Type", value=pred_label.capitalize(), delta=f"{confidence*100:.2f}% Confidence")
                st.info("L∆∞u √Ω: Ph√¢n lo·∫°i tr√™n to√†n b·ªô ·∫£nh c√≥ th·ªÉ k√©m ch√≠nh x√°c. M√¥ h√¨nh n√†y ho·∫°t ƒë·ªông t·ªët nh·∫•t v·ªõi ·∫£nh ch·ª©a m·ªôt qu√¢n c·ªù.")
            except Exception as e:
                st.error(f"L·ªói trong qu√° tr√¨nh ph√¢n lo·∫°i: {e}")
        else:
            st.warning("Classifier model not loaded. Cannot perform classification.")

    with col2:
        # S·ª≠a ti√™u ƒë·ªÅ c·ªôt k·∫øt qu·∫£ segmentation
        st.subheader("üé® Segmentation Result (Binary Mask)")
        if segmentation_model:
            try:
                processed_seg_img = preprocess_image_for_segmentation(image_pil)
                outputs = segment_image(segmentation_model, processed_seg_img)

                # G·ªçi h√†m t·∫°o ·∫£nh nh·ªã ph√¢n m·ªõi
                result_image = create_binary_mask_image(image_pil, outputs, segmentation_threshold)

                # Hi·ªÉn th·ªã ·∫£nh nh·ªã ph√¢n
                st.image(result_image, caption=f"Binary Mask (Threshold: {segmentation_threshold:.2f})", use_column_width=True)

                # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·∫´n c√≥ th·ªÉ h·ªØu √≠ch ƒë·ªÉ bi·∫øt s·ªë l∆∞·ª£ng ph√°t hi·ªán
                with st.expander("Show Detection Details (Scores)"):
                     scores = outputs['scores'].numpy()
                     labels = outputs['labels'].numpy() # D√π kh√¥ng d√πng label ƒë·ªÉ v·∫Ω nh∆∞ng v·∫´n l·∫•y ƒë∆∞·ª£c
                     valid_indices = scores > segmentation_threshold
                     # Ch·ªâ hi·ªÉn th·ªã score c·ªßa c√°c object tr√™n ng∆∞·ª°ng
                     detected_scores = scores[valid_indices]
                     st.write(f"{len(detected_scores)} objects detected above threshold:")
                     st.write(detected_scores)

            except Exception as e:
                st.error(f"L·ªói trong qu√° tr√¨nh ph√¢n ƒëo·∫°n: {e}")
        else:
            st.warning("Segmentation model not loaded. Cannot perform segmentation.")

else:
    st.info("Please upload an image using the sidebar to start.")

st.sidebar.markdown("---")
st.sidebar.write("Model Information:")
st.sidebar.write(f"- Classifier: ResNet50 (Classes: {len(CLASS_NAMES_CLASSIFIER)}, Device: {main_device.type.upper()})")
# C·∫≠p nh·∫≠t th√¥ng tin device cho segmentation
st.sidebar.write(f"- Segmenter: Mask R-CNN (Classes: {len(CLASS_NAMES_SEGMENTATION)}, Device: {segmentation_device.type.upper()})")